=begin
- input: 
  - 
- output: a string
  - first and last characters remain in original place for each word
  - characters between the first and last characters must be sorted alphabetically
  - puntuaiton should remain inplace
  - words are generated by single spaces (special characters do not seperate words)
  - puntucation inculdes [ -  '  ,  . ]
  - ignore capitalization
- explicit requirements: 
  - 
- questions: 
  - 
- implicit requirements:
  - 

- test cases
  -

- data structure:
  - 
  
- algortihm:
	- record locations for non alphabetical characters
		- split the string into an array of words
  	- initialize punc as an empty array
  	- iterate through the array the array of words
  		- initialize current_punc as an empty array
  		- iterate through the characters of each word with index
  			- if a character is not in the alphabet
  				- add a two element array of [char, idx] to current_punc
			- add current_punc to punc
		- return punc
	- return array of words with all non-alphabetic characters removed
		- split the string into an array of words
		- iterate through the array of words with map
			- remove non-alphabetic characters
  - iterate through array of words
  	- reassign word[1..-2] to word[1..-2].sort
	- add back special characters
		- iterate through words array with index
			- iterate through the punctuation array for the word at index
				- word[0..char_info[1] - 1] + char_info[0] + word[char_info[1]..-1]
=end
def non_letters_data(string)
	punc = []
	string.split.each do |word|
		current_punc = []
		word.chars.each_with_index do |char, idx|
			unless ('a'..'z').include?(char)
				current_punc << [char, idx]
			end
		end
		punc << current_punc
	end
	punc
end

def only_letters(string)
	string.split.map { |word| word.gsub(/[^a-z]/, '') }
end
 require 'pry'
def rejoin_chars(words, punc)
	words.each_index do |idx|
		punc[idx].each do |char, char_idx|
			case char_idx
			when words[idx].size then words[idx] = words[idx] + char
			when 0 then words[idx] = char + words[idx]
			else words[idx] = words[idx][0..(char_idx - 1)] + char + words[idx][char_idx..-1]
			end
		end
	end
end

def scramble_words(string)
	punc = non_letters_data(string)
	words = only_letters(string)
	
	words.each do |word|
		word[1..-2] = word[1..-2].chars.sort.join
	end
	
	rejoin_chars(words, punc)
	words.join(' ')
end

p scramble_words("you've gotta dance like there's nobody watching, love like you'll never be hurt, sing like there's nobody listening, and live like it's heaven on earth.") == "you've gotta dacne like teehr's nbdooy wachintg, love like ylo'ul neevr be hrut, sing like teehr's nbdooy leiinnstg, and live like it's haeevn on earth."
# p scramble_words('professionals') == 'paefilnoorsss'
# p scramble_words('i') == 'i'
